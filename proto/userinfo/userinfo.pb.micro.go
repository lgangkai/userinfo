// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userinfo/userinfo.proto

package userinfo

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Userinfo service

func NewUserinfoEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Userinfo service

type UserinfoService interface {
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...client.CallOption) (*GetProfileResponse, error)
	DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...client.CallOption) (*DeleteProfileResponse, error)
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...client.CallOption) (*CreateProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...client.CallOption) (*UpdateProfileResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	Authenticate(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
}

type userinfoService struct {
	c    client.Client
	name string
}

func NewUserinfoService(name string, c client.Client) UserinfoService {
	return &userinfoService{
		c:    c,
		name: name,
	}
}

func (c *userinfoService) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...client.CallOption) (*GetProfileResponse, error) {
	req := c.c.NewRequest(c.name, "Userinfo.GetProfile", in)
	out := new(GetProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoService) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...client.CallOption) (*DeleteProfileResponse, error) {
	req := c.c.NewRequest(c.name, "Userinfo.DeleteProfile", in)
	out := new(DeleteProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoService) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...client.CallOption) (*CreateProfileResponse, error) {
	req := c.c.NewRequest(c.name, "Userinfo.CreateProfile", in)
	out := new(CreateProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoService) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...client.CallOption) (*UpdateProfileResponse, error) {
	req := c.c.NewRequest(c.name, "Userinfo.UpdateProfile", in)
	out := new(UpdateProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "Userinfo.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Userinfo.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "Userinfo.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoService) Authenticate(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "Userinfo.Authenticate", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Userinfo service

type UserinfoHandler interface {
	GetProfile(context.Context, *GetProfileRequest, *GetProfileResponse) error
	DeleteProfile(context.Context, *DeleteProfileRequest, *DeleteProfileResponse) error
	CreateProfile(context.Context, *CreateProfileRequest, *CreateProfileResponse) error
	UpdateProfile(context.Context, *UpdateProfileRequest, *UpdateProfileResponse) error
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	Authenticate(context.Context, *AuthRequest, *AuthResponse) error
}

func RegisterUserinfoHandler(s server.Server, hdlr UserinfoHandler, opts ...server.HandlerOption) error {
	type userinfo interface {
		GetProfile(ctx context.Context, in *GetProfileRequest, out *GetProfileResponse) error
		DeleteProfile(ctx context.Context, in *DeleteProfileRequest, out *DeleteProfileResponse) error
		CreateProfile(ctx context.Context, in *CreateProfileRequest, out *CreateProfileResponse) error
		UpdateProfile(ctx context.Context, in *UpdateProfileRequest, out *UpdateProfileResponse) error
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error
		Authenticate(ctx context.Context, in *AuthRequest, out *AuthResponse) error
	}
	type Userinfo struct {
		userinfo
	}
	h := &userinfoHandler{hdlr}
	return s.Handle(s.NewHandler(&Userinfo{h}, opts...))
}

type userinfoHandler struct {
	UserinfoHandler
}

func (h *userinfoHandler) GetProfile(ctx context.Context, in *GetProfileRequest, out *GetProfileResponse) error {
	return h.UserinfoHandler.GetProfile(ctx, in, out)
}

func (h *userinfoHandler) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, out *DeleteProfileResponse) error {
	return h.UserinfoHandler.DeleteProfile(ctx, in, out)
}

func (h *userinfoHandler) CreateProfile(ctx context.Context, in *CreateProfileRequest, out *CreateProfileResponse) error {
	return h.UserinfoHandler.CreateProfile(ctx, in, out)
}

func (h *userinfoHandler) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, out *UpdateProfileResponse) error {
	return h.UserinfoHandler.UpdateProfile(ctx, in, out)
}

func (h *userinfoHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.UserinfoHandler.Register(ctx, in, out)
}

func (h *userinfoHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.UserinfoHandler.Login(ctx, in, out)
}

func (h *userinfoHandler) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.UserinfoHandler.Logout(ctx, in, out)
}

func (h *userinfoHandler) Authenticate(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.UserinfoHandler.Authenticate(ctx, in, out)
}
